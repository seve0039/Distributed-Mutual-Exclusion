// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/dme.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenRing_RCS_FullMethodName = "/proto.TokenRing/RCS"
)

// TokenRingClient is the client API for TokenRing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenRingClient interface {
	RCS(ctx context.Context, opts ...grpc.CallOption) (TokenRing_RCSClient, error)
}

type tokenRingClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenRingClient(cc grpc.ClientConnInterface) TokenRingClient {
	return &tokenRingClient{cc}
}

func (c *tokenRingClient) RCS(ctx context.Context, opts ...grpc.CallOption) (TokenRing_RCSClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenRing_ServiceDesc.Streams[0], TokenRing_RCS_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenRingRCSClient{stream}
	return x, nil
}

type TokenRing_RCSClient interface {
	Send(*CriticalSectionRequest) error
	Recv() (*CriticalSectionRequest, error)
	grpc.ClientStream
}

type tokenRingRCSClient struct {
	grpc.ClientStream
}

func (x *tokenRingRCSClient) Send(m *CriticalSectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenRingRCSClient) Recv() (*CriticalSectionRequest, error) {
	m := new(CriticalSectionRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenRingServer is the server API for TokenRing service.
// All implementations must embed UnimplementedTokenRingServer
// for forward compatibility
type TokenRingServer interface {
	RCS(TokenRing_RCSServer) error
	mustEmbedUnimplementedTokenRingServer()
}

// UnimplementedTokenRingServer must be embedded to have forward compatible implementations.
type UnimplementedTokenRingServer struct {
}

func (UnimplementedTokenRingServer) RCS(TokenRing_RCSServer) error {
	return status.Errorf(codes.Unimplemented, "method RCS not implemented")
}
func (UnimplementedTokenRingServer) mustEmbedUnimplementedTokenRingServer() {}

// UnsafeTokenRingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenRingServer will
// result in compilation errors.
type UnsafeTokenRingServer interface {
	mustEmbedUnimplementedTokenRingServer()
}

func RegisterTokenRingServer(s grpc.ServiceRegistrar, srv TokenRingServer) {
	s.RegisterService(&TokenRing_ServiceDesc, srv)
}

func _TokenRing_RCS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenRingServer).RCS(&tokenRingRCSServer{stream})
}

type TokenRing_RCSServer interface {
	Send(*CriticalSectionRequest) error
	Recv() (*CriticalSectionRequest, error)
	grpc.ServerStream
}

type tokenRingRCSServer struct {
	grpc.ServerStream
}

func (x *tokenRingRCSServer) Send(m *CriticalSectionRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenRingRCSServer) Recv() (*CriticalSectionRequest, error) {
	m := new(CriticalSectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokenRing_ServiceDesc is the grpc.ServiceDesc for TokenRing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenRing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TokenRing",
	HandlerType: (*TokenRingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RCS",
			Handler:       _TokenRing_RCS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/dme.proto",
}
