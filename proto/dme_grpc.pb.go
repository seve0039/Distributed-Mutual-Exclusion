// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/dme.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenRing_RequestCriticalSection_FullMethodName = "/proto.TokenRing/requestCriticalSection"
	TokenRing_SendRequestAccess_FullMethodName      = "/proto.TokenRing/SendRequestAccess"
)

// TokenRingClient is the client API for TokenRing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenRingClient interface {
	RequestCriticalSection(ctx context.Context, opts ...grpc.CallOption) (TokenRing_RequestCriticalSectionClient, error)
	SendRequestAccess(ctx context.Context, in *CriticalSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tokenRingClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenRingClient(cc grpc.ClientConnInterface) TokenRingClient {
	return &tokenRingClient{cc}
}

func (c *tokenRingClient) RequestCriticalSection(ctx context.Context, opts ...grpc.CallOption) (TokenRing_RequestCriticalSectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TokenRing_ServiceDesc.Streams[0], TokenRing_RequestCriticalSection_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tokenRingRequestCriticalSectionClient{stream}
	return x, nil
}

type TokenRing_RequestCriticalSectionClient interface {
	Send(*CriticalSectionRequest) error
	Recv() (*CriticalSectionRequest, error)
	grpc.ClientStream
}

type tokenRingRequestCriticalSectionClient struct {
	grpc.ClientStream
}

func (x *tokenRingRequestCriticalSectionClient) Send(m *CriticalSectionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokenRingRequestCriticalSectionClient) Recv() (*CriticalSectionRequest, error) {
	m := new(CriticalSectionRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokenRingClient) SendRequestAccess(ctx context.Context, in *CriticalSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TokenRing_SendRequestAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenRingServer is the server API for TokenRing service.
// All implementations must embed UnimplementedTokenRingServer
// for forward compatibility
type TokenRingServer interface {
	RequestCriticalSection(TokenRing_RequestCriticalSectionServer) error
	SendRequestAccess(context.Context, *CriticalSectionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTokenRingServer()
}

// UnimplementedTokenRingServer must be embedded to have forward compatible implementations.
type UnimplementedTokenRingServer struct {
}

func (UnimplementedTokenRingServer) RequestCriticalSection(TokenRing_RequestCriticalSectionServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestCriticalSection not implemented")
}
func (UnimplementedTokenRingServer) SendRequestAccess(context.Context, *CriticalSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestAccess not implemented")
}
func (UnimplementedTokenRingServer) mustEmbedUnimplementedTokenRingServer() {}

// UnsafeTokenRingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenRingServer will
// result in compilation errors.
type UnsafeTokenRingServer interface {
	mustEmbedUnimplementedTokenRingServer()
}

func RegisterTokenRingServer(s grpc.ServiceRegistrar, srv TokenRingServer) {
	s.RegisterService(&TokenRing_ServiceDesc, srv)
}

func _TokenRing_RequestCriticalSection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokenRingServer).RequestCriticalSection(&tokenRingRequestCriticalSectionServer{stream})
}

type TokenRing_RequestCriticalSectionServer interface {
	Send(*CriticalSectionRequest) error
	Recv() (*CriticalSectionRequest, error)
	grpc.ServerStream
}

type tokenRingRequestCriticalSectionServer struct {
	grpc.ServerStream
}

func (x *tokenRingRequestCriticalSectionServer) Send(m *CriticalSectionRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokenRingRequestCriticalSectionServer) Recv() (*CriticalSectionRequest, error) {
	m := new(CriticalSectionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TokenRing_SendRequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CriticalSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenRingServer).SendRequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenRing_SendRequestAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenRingServer).SendRequestAccess(ctx, req.(*CriticalSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenRing_ServiceDesc is the grpc.ServiceDesc for TokenRing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenRing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TokenRing",
	HandlerType: (*TokenRingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRequestAccess",
			Handler:    _TokenRing_SendRequestAccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "requestCriticalSection",
			Handler:       _TokenRing_RequestCriticalSection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/dme.proto",
}
